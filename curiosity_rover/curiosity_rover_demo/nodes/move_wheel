#!/usr/bin/env python3
"""Move the wheels of the curiosity rover."""
import math

import rclpy  # type: ignore
from rclpy.node import Node  # type: ignore

from geometry_msgs.msg import Twist  # type: ignore
from curiosity_common.sim.wheel_control import GazeboMobileController, IsaacMobileController  # type: ignore


class MoveWheel(Node):
    """Move the wheels of the curiosity rover."""

    def __init__(self):
        super().__init__("wheel_node")

        self.declare_parameter(
            "environment",
            rclpy.Parameter.Type.STRING,
        )

        self._environment = (
            self.get_parameter("environment").get_parameter_value().string_value
        )

        if self._environment == "gazebosim":
            self._mobile_controller = GazeboMobileController(self)
        else:
            self._mobile_controller = IsaacMobileController(self)

        timer_period = 0.1  # seconds
        self.timer = self.create_timer(timer_period, self.timer_callback)

        self.vel_sub = self.create_subscription(
            Twist, "/cmd_vel", self.vel_callback, 10
        )
        self.curr_vel = Twist()
        self.last_vel = Twist()
        self.should_steer = False

    def vel_callback(self, msg):
        """Velocity callback."""

        if self._environment == "isaacsim":
            self._mobile_controller.set_cmd_vel(msg)
            return

        if (
            abs(self.last_vel.angular.z - self.curr_vel.angular.z) > 0.01
            and self.should_steer is False
        ):
            self.last_vel = Twist()
            self.last_vel.linear.x = self.curr_vel.linear.x
            self.last_vel.angular.z = self.curr_vel.angular.z
            self.should_steer = True

        self.curr_vel = msg

    def set_wheel_common_speed(self, vel):
        """Set the wheel common speed."""

        target_vel = [vel, vel * 1.5, vel, -vel, -vel * 1.5, -vel]

        # self.get_logger().info(f'Publishing: "{target_vel.data}"')
        self._mobile_controller.set_wheel_speed(target_vel)

    def map_angular_to_steering(self, angular_speed) -> float:
        """Map angular speed to steering angle."""
        if abs(angular_speed) < 1e-3:
            return 0.0

        # max 0.6 min -0.6
        angular_speed = min(0.6, max(angular_speed, -0.6))
        return (angular_speed / abs(angular_speed)) * (-25 * abs(angular_speed) + 17.5)

    def set_steering(self, turn_rad):
        """Set the steering angle."""
        # Ideal Ackerman Steering
        joint_names = [
            "suspension_steer_F_L_joint",
            "suspension_steer_B_L_joint",
            "suspension_steer_F_R_joint",
            "suspension_steer_B_R_joint",
        ]
        steer_point = []

        if abs(turn_rad) < 1e-3:
            steer_point = [0.0, 0.0, 0.0, 0.0]
        else:
            turning_radius = abs(turn_rad)  # R

            chassis_length = 2.08157  # L
            chassis_width = 1.53774  # T

            alpha_i = math.atan(chassis_length / (turning_radius - (chassis_width / 2)))
            alpha_o = math.atan(chassis_length / (turning_radius + (chassis_width / 2)))

            if alpha_i > 0.6:
                alpha_i = 0.6

            if alpha_o > 0.6:
                alpha_o = 0.6

            alpha_i = round(alpha_i, 2)
            alpha_o = round(alpha_o, 2)

            if turn_rad > 0.0:
                steer_point = [alpha_i, -alpha_i, alpha_o, -alpha_o]
            else:
                steer_point = [-alpha_o, alpha_o, -alpha_i, alpha_i]

        self._mobile_controller.set_steering(joint_names, steer_point)

    def set_suspension(self):
        """Set the suspension."""
        target_val = [0.3, -0.1, 0.3, -0.1]
        self._mobile_controller.set_suspension(target_val)

    def timer_callback(self):
        """Timer callback."""
        self.set_wheel_common_speed(self.curr_vel.linear.x)
        self.set_suspension()

        if self.should_steer:
            steering_val = self.map_angular_to_steering(self.curr_vel.angular.z)
            self.set_steering(steering_val)
            self.should_steer = False


def main(args=None):
    """Main function."""
    rclpy.init(args=args)

    wheel_node = MoveWheel()

    rclpy.spin(wheel_node)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    wheel_node.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()
