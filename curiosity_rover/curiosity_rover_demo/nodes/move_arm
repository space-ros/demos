#!/usr/bin/env python3
"""Move the arm of the curiosity rover."""

import rclpy  # type: ignore
from rclpy.node import Node  # type: ignore
from std_srvs.srv import Empty  # type: ignore

from curiosity_common.sim.arm_control import GazeboJointController, IsaacJointController  # type: ignore


class MoveArm(Node):
    """Move the arm of the curiosity rover."""

    def __init__(self):
        super().__init__("arm_node")
        self.open_srv = self.create_service(Empty, "open_arm", self.open_arm_callback)
        self.close_srv = self.create_service(
            Empty, "close_arm", self.close_arm_callback
        )

        self.declare_parameter(
            "environment",
            rclpy.Parameter.Type.STRING,
        )

        self._environment = (
            self.get_parameter("environment").get_parameter_value().string_value
        )

        if self._environment == "gazebosim":
            self._controller = GazeboJointController(
                self, "/arm_joint_trajectory_controller/joint_trajectory"
            )
        elif self._environment == "isaacsim":
            self._controller = IsaacJointController(
                self, "/curiosity/arm/joint_command"
            )

        self._joint_names = [
            "arm_01_joint",
            "arm_02_joint",
            "arm_03_joint",
            "arm_04_joint",
            "arm_tools_joint",
        ]
        self._open_positions = [0.0, -0.5, 3.0, 1.0, 0.0]
        self._close_positions = [-1.57, -0.4, -1.1, -1.57, -1.57]

        self.open = True

    def open_arm_callback(self, request, response):  # pylint: disable=unused-argument
        """Open the arm."""
        self._controller.set_joint_states(self._joint_names, self._open_positions)

        return response

    def close_arm_callback(self, request, response):  # pylint: disable=unused-argument
        """Close the arm."""
        self._controller.set_joint_states(self._joint_names, self._close_positions)

        return response


def main(args=None):
    """Main function"""
    rclpy.init(args=args)

    arm_node = MoveArm()

    rclpy.spin(arm_node)
    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    arm_node.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()
