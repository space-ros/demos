#!/usr/bin/env python3

# adapted from ROS 2 tutorial
# https://docs.ros.org/en/rolling/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.html
"""Odometry TF Broadcaster for Curiosity Mars Rovers"""

import rclpy  # type: ignore

from nav_msgs.msg import Odometry  # type: ignore
from geometry_msgs.msg import TransformStamped  # type: ignore
from rclpy.node import Node  # type: ignore
from tf2_ros import TransformBroadcaster  # type: ignore


class OdomTFBroadcaster(Node):
    """Odometry TF Broadcaster for Curiosity Mars Rovers"""

    def __init__(self):
        super().__init__("odom_tf_publisher")

        # Declare the parameter for the topic name
        self.declare_parameter("odom_topic", "/model/curiosity_mars_rover/odometry")

        # Get the parameter value
        odom_topic = self.get_parameter("odom_topic").get_parameter_value().string_value

        # Initialize the transform broadcaster
        self.tf_broadcaster = TransformBroadcaster(self)

        # Subscribe to Odometry topic
        self.subscription = self.create_subscription(
            Odometry, odom_topic, self.handle_odometry, 1
        )

    def handle_odometry(self, msg):
        """Handle incoming Odometry message and broadcast it as a TF"""
        tf = TransformStamped()

        # Read message content and assign it to
        # corresponding tf variables
        tf.header.stamp = msg.header.stamp
        tf.header.frame_id = msg.header.frame_id
        tf.child_frame_id = msg.child_frame_id

        # get translation coordinates from the message pose
        tf.transform.translation.x = msg.pose.pose.position.x
        tf.transform.translation.y = msg.pose.pose.position.y
        tf.transform.translation.z = msg.pose.pose.position.z

        # get rotation from the message pose
        tf.transform.rotation.x = msg.pose.pose.orientation.x
        tf.transform.rotation.y = msg.pose.pose.orientation.y
        tf.transform.rotation.z = msg.pose.pose.orientation.z
        tf.transform.rotation.w = msg.pose.pose.orientation.w

        # Send the transformation
        self.tf_broadcaster.sendTransform(tf)


def main():
    """Main function to start the node"""
    rclpy.init()
    node = OdomTFBroadcaster()
    node.get_logger().info("Starting odometry_tf_publisher node")
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass

    rclpy.shutdown()


if __name__ == "__main__":
    main()
