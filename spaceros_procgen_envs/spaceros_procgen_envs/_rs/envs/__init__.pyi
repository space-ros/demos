from typing import Optional, Tuple

class EnvironmentConfig:
    def __init__(
        self,
        scenario: Scenario,
        assets: Assets,
        seed: int,
        detail: float,
    ): ...
    @staticmethod
    def extract(
        cls,
        cfg_path: Optional[str] = None,
        env_prefix: Optional[str] = "SPACEROS_",
        other: Optional[EnvironmentConfig] = None,
    ) -> EnvironmentConfig: ...
    def write(self, path: str): ...
    @property
    def scenario(self) -> Scenario: ...
    @property
    def assets(self) -> Assets: ...
    @property
    def seed(self) -> int: ...
    @property
    def detail(self) -> float: ...

class Assets:
    def __init__(
        self,
        robot: Asset,
        object: Asset,
        terrain: Asset,
        vehicle: Asset,
    ): ...
    @property
    def robot(self) -> Asset: ...
    @property
    def object(self) -> Asset: ...
    @property
    def terrain(self) -> Asset: ...
    @property
    def vehicle(self) -> Asset: ...

class Asset:
    def __init__(
        self,
        variant: AssetVariant,
    ): ...
    @property
    def variant(self) -> AssetVariant: ...

class AssetVariant:
    NONE: int = ...
    PRIMITIVE: int = ...
    DATASET: int = ...
    PROCEDURAL: int = ...

class Scenario:
    ASTEROID: int = ...
    EARTH: int = ...
    MARS: int = ...
    MOON: int = ...
    ORBIT: int = ...
    @property
    def gravity_magnitude(self) -> float: ...
    @property
    def gravity_variation(self) -> float: ...
    @property
    def gravity_range(self) -> Tuple[float, float]: ...
    @property
    def light_intensity(self) -> float: ...
    @property
    def light_intensity_variation(self) -> float: ...
    @property
    def light_intensity_range(self) -> Tuple[float, float]: ...
    @property
    def light_angular_diameter(self) -> float: ...
    @property
    def light_angular_diameter_variation(self) -> float: ...
    @property
    def light_angular_diameter_range(self) -> Tuple[float, float]: ...
    @property
    def light_color_temperature(self) -> float: ...
    @property
    def light_color_temperature_variation(self) -> float: ...
    @property
    def light_color_temperature_range(self) -> Tuple[float, float]: ...
