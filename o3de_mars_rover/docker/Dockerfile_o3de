# Copyright 2024 Azmyin Md. Kamal
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# A Docker configuration script to build the o3de_curiosit_docker image that showcases Open 3D Engine
# in simulating a Curiosity rover traversing through a test ground inspired by the NASA JPL Mars Yard
# O3DE docker file based on https://github.com/husarion/o3de-docker/blob/main/Dockerfile
# Requirements: openrobotics/space_robots_demo image
#
#
# The script provides the following build arguments:
#
#   VCS_REF     - The git revision of the Space ROS source code (no default value).
#   VERSION     - The version of Space ROS (default: "preview")

FROM openrobotics/space_robot_demo:latest

# Define arguments used in the metadata definition
ARG VCS_REF
ARG VERSION="preview"
ARG ROS_DISTRO=humble 

# Specify the docker image metadata
LABEL org.label-schema.schema-version="1.0"
LABEL org.label-schema.name="O3DE Curiosity Rover"
LABEL org.label-schema.description="O3DE Curiosity rover demo image"
LABEL org.label-schema.vendor="Nasa Space ROS Sim Summer Spring Challenge 2024"
LABEL org.label-schema.version=${VERSION}
LABEL org.label-schema.url="https://github.com/space-ros"
LABEL org.label-schema.vcs-url="https://github.com/Mechazo11/space-ros-docker"
LABEL org.label-schema.vcs-ref=${VCS_REF}

# Define a key enviornment variables
ENV MOVEIT2_DIR=${HOME_DIR}/moveit2
ENV DEMO_DIR=${HOME_DIR}/demos_ws
ENV IGNITION_VERSION fortress
ENV GZ_VERSION fortress
ENV PROJECT_NAME=RobotSim
ENV O3DE_ENGINE=${HOME_DIR}/o3de
ENV O3DE_DIR=${HOME_DIR}/O3DE
ENV O3DE_EXTRAS=${HOME_DIR}/o3de-extras
ENV PROJECT_PATH=${O3DE_DIR}/Projects/${PROJECT_NAME}

# Disable prompting during package installation
ARG DEBIAN_FRONTEND=noninteractive
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Etc/UTC

### Install all dependencies for demo_ws and O3DE ###

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  sudo apt-get update -y && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
  python3-rosinstall-generator \
  libboost-python-dev build-essential cmake libboost-all-dev libois-dev \
  libzzip-dev libfreeimage-dev libfreetype6-dev libx11-dev libxt-dev libxaw7-dev \
  libsdl2-dev libpugixml-dev libglew-dev qtbase5-dev libspdlog-dev libfmt-dev \
  libignition-gazebo6-dev libssl-dev devscripts debian-keyring fakeroot debhelper \
  libboost-dev libsasl2-dev libicu-dev libzstd-dev doxygen libtinyxml-dev \
  libtinyxml2-dev python3-pyqt5 tzdata locales keyboard-configuration

RUN sudo sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && sudo dpkg-reconfigure --frontend=noninteractive locales \
    && sudo update-locale LANG=en_US.UTF-8

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    sudo apt-get update -y && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
    bc \
    bind9-utils binutils ca-certificates clang cmake \
    file firewalld git git-lfs jq kbd kmod less \
    lsb-release libglu1-mesa-dev libxcb-xinerama0 libfontconfig1-dev \
    libcurl4-openssl-dev libnvidia-gl-470 libssl-dev libxcb-xkb-dev \
    libxkbcommon-x11-dev libxkbcommon-dev libxcb-xfixes0-dev \
    libxcb-xinput-dev libxcb-xinput0 \
    libpcre2-16-0 lsof net-tools ninja-build pciutils \
    python3-pip software-properties-common \
    sudo tar unzip vim wget xz-utils
    # && rm -rf /var/lib/apt/lists/* #  TODO need to figure out how to use this correctly

### Install all dependencies for O3DE ###

# Git clone RobotSim, NasaMarsRoverGem and MarsYardGem
WORKDIR ${O3DE_DIR}/Projects
RUN git clone --branch nasa_submission https://github.com/Mechazo11/RobotSim.git

WORKDIR ${O3DE_DIR}/Gems
RUN git clone --branch nasa_submission https://github.com/Mechazo11/NasaCuriosityRoverGem.git
RUN git clone --branch nasa_submission https://github.com/Mechazo11/MarsYardGem.git

# ## Symlink clang version to non-versioned clang and set cc to clang
RUN sudo DEBIAN_FRONTEND=noninteractive update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100 \
    && sudo DEBIAN_FRONTEND=noninteractive update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 100

# ####  Install Open 3D Engine   ####  

# # Pull latest commit from development and build o3de. Note this does't build the whole engine
WORKDIR ${HOME_DIR}

# # Install o3de engine (automatically pulls last commit from "development" branch)
RUN git clone --single-branch -b development https://github.com/o3de/o3de.git \
    && cd o3de \
    && git lfs install \
    && git lfs pull \
    && python/get_python.sh

# # Install o3de-extras (automatically pulls last commit from "development" branch)
# # Contains ROS 2 Gem and other relevant assets

# WORKDIR ${HOME_DIR}
RUN git clone --single-branch -b development https://github.com/o3de/o3de-extras.git \
    && cd o3de-extras \
    && git lfs install \
    && git lfs pull

WORKDIR ${HOME_DIR}/o3de

# Register RobotSim with this engine
#RUN ${O3DE_ENGINE}/scripts/o3de.sh register --this-engine 
RUN ./scripts/o3de.sh register --this-engine \
    && ./scripts/o3de.sh register --gem-path ${O3DE_EXTRAS}/Gems/ROS2 \
    && ./scripts/o3de.sh register --gem-path ${O3DE_EXTRAS}/Gems/RosRobotSample \
    && ./scripts/o3de.sh register --gem-path ${O3DE_EXTRAS}/Gems/WarehouseSample \
    && ./scripts/o3de.sh register --gem-path ${O3DE_DIR}/Gems/NasaCuriosityRoverGem \
    && ./scripts/o3de.sh register --gem-path ${O3DE_DIR}/Gems/MarsYardGem \
    && ./scripts/o3de.sh register --gem-path ${HOME_DIR}/o3de/Gems/Terrain

# Register RobotSim project.
# Project must be registered at the very end after all dependent gems are registered
RUN ./scripts/o3de.sh register --project-path ${O3DE_DIR}/Projects/${PROJECT_NAME}

# # Move to project directory and run cmake and build project (Warning takes about 10-15 mins)
WORKDIR ${HOME_DIR}

# Install more essential binaries gazebo-msgs from binary
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    sudo apt-get update -y && sudo apt-get install -y \
    libunwind-dev ros-${ROS_DISTRO}-gazebo-ros-pkgs

# Move to project directory
WORKDIR ${PROJECT_PATH}

# Source ROS2, Space Ros, Movit2 and Demo_ws
RUN /bin/bash -c 'source "/opt/ros/humble/setup.bash"' \
    && /bin/bash -c 'source "${SPACEROS_DIR}/install/setup.bash"' \
    && /bin/bash -c 'source "${MOVEIT2_DIR}/install/setup.bash"'

RUN /bin/bash -c 'source ${DEMO_DIR}/install/setup.bash \
    && cmake -B build/linux -G "Ninja Multi-Config" -DLY_DISABLE_TEST_MODULES=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DLY_STRIP_DEBUG_SYMBOLS=ON -DAZ_USE_PHYSX5:BOOL=ON'

RUN cmake --build build/linux --config profile --target ${PROJECT_NAME} Editor ${PROJECT_NAME}.Assets

# Add the user to the render group so that the user can access /dev/dri/renderD128
# /dev/dri/renderD128 gives access to hardware-accelerated rendering tool such as GPU
RUN sudo usermod -aG render $USERNAME

# Setup the entrypoint
COPY ./entrypoint.sh /
ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]
