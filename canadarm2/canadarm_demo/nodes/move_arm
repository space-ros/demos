#!/usr/bin/env python3
"""Move the arm to a specific position."""

import rclpy  # type: ignore
from rclpy.node import Node  # type: ignore
from builtin_interfaces.msg import Duration  # type: ignore

from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint  # type: ignore
from std_srvs.srv import Empty  # type: ignore


class MoveArm(Node):
    """Move the arm to a specific position."""

    def __init__(self):
        super().__init__("arm_node")
        self.arm_publisher_ = self.create_publisher(
            JointTrajectory,
            "/canadarm_joint_trajectory_controller/joint_trajectory",
            10,
        )
        self.open_srv = self.create_service(Empty, "open_arm", self.open_arm_callback)
        self.close_srv = self.create_service(
            Empty, "close_arm", self.close_arm_callback
        )
        self.random_srv = self.create_service(
            Empty, "random_arm", self.random_arm_callback
        )

    def open_arm_callback(self, request, response):  # pylint: disable=unused-argument
        """Open the arm."""
        traj = JointTrajectory()
        traj.joint_names = [
            "Base_Joint",
            "Shoulder_Roll",
            "Shoulder_Yaw",
            "Elbow_Pitch",
            "Wrist_Pitch",
            "Wrist_Yaw",
            "Wrist_Roll",
        ]

        point1 = JointTrajectoryPoint()
        point1.positions = [0.0, 0.0, 0.0, -3.1416, 0.0, 0.0, 0.0]
        point1.time_from_start = Duration(sec=4)

        traj.points.append(point1)
        self.arm_publisher_.publish(traj)

        return response

    def close_arm_callback(self, request, response):  # pylint: disable=unused-argument
        """Close the arm."""
        traj = JointTrajectory()
        traj.joint_names = [
            "Base_Joint",
            "Shoulder_Roll",
            "Shoulder_Yaw",
            "Elbow_Pitch",
            "Wrist_Pitch",
            "Wrist_Yaw",
            "Wrist_Roll",
        ]

        point1 = JointTrajectoryPoint()
        point1.positions = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        point1.time_from_start = Duration(sec=4)

        traj.points.append(point1)
        self.arm_publisher_.publish(traj)

        return response

    def random_arm_callback(self, request, response):  # pylint: disable=unused-argument
        """Move the arm to a random position."""
        traj = JointTrajectory()
        traj.joint_names = [
            "Base_Joint",
            "Shoulder_Roll",
            "Shoulder_Yaw",
            "Elbow_Pitch",
            "Wrist_Pitch",
            "Wrist_Yaw",
            "Wrist_Roll",
        ]

        point1 = JointTrajectoryPoint()
        point1.positions = [1.0, -1.5, 2.0, -3.2, 0.8, 0.5, -1.0]
        point1.time_from_start = Duration(sec=4)

        traj.points.append(point1)
        self.arm_publisher_.publish(traj)

        return response


def main(args=None):
    """Main function."""
    rclpy.init(args=args)

    arm_node = MoveArm()

    rclpy.spin(arm_node)
    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    arm_node.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()
